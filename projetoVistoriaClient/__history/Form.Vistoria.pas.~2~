unit Form.Vistoria;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Datasnap.DBClient, Imovel,Pessoa,
  Vcl.StdCtrls, Vcl.DBCtrls, Vcl.ComCtrls;

type
  TForm2 = class(TForm)
    pgcVistoria: TPageControl;
    tsCadastro: TTabSheet;
    Consulta: TTabSheet;
    lblCodigo: TLabel;
    edtCodigo: TEdit;
    lblData: TLabel;
    Label1: TLabel;
    DateTimePicker1: TDateTimePicker;
    edtObservacao: TEdit;
    lblObservacao: TLabel;
    edtImovel: TEdit;
    dbcbbImovel: TDBComboBox;
    dsImovel: TDataSource;
    cdsImovel: TClientDataSet;
    intgrfldImovelIdImovel: TIntegerField;
    strngfldImovelquadra: TStringField;
    strngfldImovellote: TStringField;
    fltfldImovelmetragemterreno: TFloatField;
    fltfldImovelmetragemimovel: TFloatField;
    strngfldImovellogradouro: TStringField;
    strngfldImovelbairro: TStringField;
    strngfldImovelcomplemento: TStringField;
    intgrfldImovelnumero: TIntegerField;
    strngfldImovelcep: TStringField;
  private
    { Private declarations }
  public
    procedure getAllImovel();
  end;

var
  Form2: TForm2;

implementation

{$R *.dfm}

procedure TfrmImovel.getAllImovel;
var
  AImovel: TImovel;
  JArray: TJSONArray;
  i: Integer;
begin
  if not cdsImovel.Active then
    cdsImovel.CreateDataSet;

  cdsImovel.EmptyDataSet;

  AImovelClient := TsmImovelClient.Create(ClientModule.dsConnection);
  try
    JArray := AImovelClient.getAllImovel();

    for i := 0 to JArray.Size -1 do
    begin
      AImovel := TImovel.Create;
      try
        AImovel := TImovel.JSONToObject<TImovel>(JArray.Get(i));

        cdsImovel.InsertRecord([AImovel.IdImovel, AImovel.Quadra, AImovel.Lote,AImovel.MetragemTerreno,
        AImovel.MetragemImovel,AImovel.Logradouro,AImovel.Bairro,AImovel.Complemento,AImovel.Numero,AImovel.Cep]);
      finally
        AImovel.Free;
      end;
    end;
  finally
    FreeAndNil(AImovelClient);
  end;
end;

end.
